<template>
<div>
  <p>Resource Type Clicked: {{resourceSelected}}</p>
  <div class="charts" id="subjectBubbleChart" ref="circlesdiv">
  </div>
</div>

</template>

<script>
import * as am5 from '@amcharts/amcharts5';
import * as am5hierarchy from "@amcharts/amcharts5/hierarchy";
import am5themes_Animated from '@amcharts/amcharts5/themes/Animated';
import { sunburstdata, policies, standards, database } from '@/data'

export default {
  name: 'SubjectType',
  data:() => {
    return {
      itemClicked: "",
      fakedata: sunburstdata,
      policies: policies.data,
      standards: standards.data,
      database: database.data,
      combinedData: [],
      // subjects: [],
      // subjectSelected: [],
    }
  },
  props:[
    "resourceSelected",
  ],
  mounted() {
    console.log("resourceSelected Mounted::", this.resourceSelected)
    this.getCircles()
  },
  methods: {
    getData() {
      return this.combinedData = [...this.policies, ...this.standards, ...this.database]
    },
    reset(divId) {
      am5.array.each(am5.registry.rootElements, function (root) {
        if (root.dom.id === divId) {
          root.dispose();
        }
      });
    },
    getCircles() {

      // this.reset("subjectBubbleChart")

      // Create root element
      let root = am5.Root.new(this.$refs.circlesdiv);

      //To remove amcharts logo
      root._logo.dispose()

      // Set themes
      root.setThemes([am5themes_Animated.new(root)]);


      // Set data
      // let filteredData = this.getData().filter( obj => {
      //   return obj.name.toLowerCase().replaceAll(' ', '') === this.resourceSelected.toLowerCase().replaceAll(' ', '')
      // })
      // console.log("filteredData::", filteredData)
      // let data = filteredData[0]
      // console.log("data::", data)
      // this.subjects = data.children

      let data = this.fakedata;


      // Create wrapper container
      let container = root.container.children.push(am5.Container.new(root, {
        width: am5.percent(100),
        height: am5.percent(100),
        layout: root.verticalLayout
      }));

      // Create series
      let series = container.children.push(am5hierarchy.ForceDirected.new(root, {
        focusable: true,
        ariaLabel: "FAIRassist: Subject Type",
        singleBranchOnly: false,
        downDepth: 0,
        upDepth: 0,
        topDepth: 1,
        initialDepth: 0,
        valueField: "value",
        categoryField: "name",
        childDataField: "children",
        idField: "name",
        linkWithField: "linkWith",
        manyBodyStrength: -20,
        centerStrength: 0.8,
        minRadius: 80,
        // maxRadius: 90,
        // minRadius: am5.percent(6),
        maxRadius: am5.percent(7)
      }));
      series.get("colors").setAll({
        step: 8
      });

      series.labels.template.setAll({
        fontSize: 30,
      });


      series.links.template.set("strength", 0.5);
      console.log("Subject[data]:::", [data])
      series.data.setAll([data]);
      series.set("selectedDataItem", series.dataItems[0]);
      // series.outerCircles.template.states.create("disabled", {
      //   fillOpacity: 0.5,
      //   strokeOpacity: 0,
      //   strokeDasharray: 0
      // });

      // Make stuff animate on load
      series.appear(1000, 100);
    },
  }
}
</script>

<style lang="scss" scoped>
.charts {
  width: 100%;
  height: 600px;
}
</style>
